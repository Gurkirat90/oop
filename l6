//ambiguity resolution in inheritance in cpp
#include<iostream>
using namespace std;
//suppose class A have a greet function and 
//classs B also have a greet function now which
//one will be used by derived class C
//to solve this ambiguity we use
class base1
{ public : 
void greet()
{
cout<<"how are you?"<<endl;
}
};
class base2
{ public : 
void greet()
{
cout<<"how are you?"<<endl;
}
};
class derived :public base1,public base2
{int a;
public: 
void greet()
{
    base1:: greet();}
};

class B{
public: void say()
{
cout<<"hello world"<<endl;
}
};
class D:public B{int a;
public: void say()
{
cout<<"hello world!!!!!!!!"<<endl;
}
};
int main()
{//ambiguity 1
base1 base1obj;
base2 base2obj;
base1obj.greet();
base2obj.greet();
//derived dr;//  /////////////////////////////
//der.greet();// /////////////////////////////
derived dr;
dr.greet();
//ambiguity 2

B b;
b.say();
D d;
d.say();
return 0;
}
